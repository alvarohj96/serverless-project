{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "CreateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
<<<<<<< HEAD
        "LogGroupName": "/aws/lambda/api-rest-dev-create"
=======
        "LogGroupName": "/aws/lambda/api-rest-Stage-create"
>>>>>>> develop
      }
    },
    "ListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
<<<<<<< HEAD
        "LogGroupName": "/aws/lambda/api-rest-dev-list"
=======
        "LogGroupName": "/aws/lambda/api-rest-Stage-list"
>>>>>>> develop
      }
    },
    "GetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
<<<<<<< HEAD
        "LogGroupName": "/aws/lambda/api-rest-dev-get"
=======
        "LogGroupName": "/aws/lambda/api-rest-Stage-get"
>>>>>>> develop
      }
    },
    "UpdateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
<<<<<<< HEAD
        "LogGroupName": "/aws/lambda/api-rest-dev-update"
=======
        "LogGroupName": "/aws/lambda/api-rest-Stage-update"
>>>>>>> develop
      }
    },
    "DeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
<<<<<<< HEAD
        "LogGroupName": "/aws/lambda/api-rest-dev-delete"
=======
        "LogGroupName": "/aws/lambda/api-rest-Stage-delete"
>>>>>>> develop
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "api-rest",
<<<<<<< HEAD
                  "dev",
=======
                  "Stage",
>>>>>>> develop
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
<<<<<<< HEAD
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-rest-dev*:*"
=======
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-rest-Stage*:*"
>>>>>>> develop
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
<<<<<<< HEAD
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-rest-dev*:*:*"
=======
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/api-rest-Stage*:*:*"
>>>>>>> develop
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
<<<<<<< HEAD
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/api-rest-dev"
=======
                  "Resource": "arn:aws:dynamodb:us-east-1:*:table/api-rest-Stage"
>>>>>>> develop
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "api-rest",
<<<<<<< HEAD
              "dev",
=======
              "Stage",
>>>>>>> develop
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
<<<<<<< HEAD
=======
    "EnterpriseLogAccessIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::802587217904:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "ServerlessEnterprise-0efc6298-dc05-44b9-93ab-959165ee5616"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogFilterAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:FilterLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "CreateLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ListLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "GetLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UpdateLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeleteLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
>>>>>>> develop
    "CreateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/api-rest/dev/1621358840371-2021-05-18T17:27:20.371Z/api-rest.zip"
        },
        "Handler": "todos/create.create",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-dev-create",
=======
          "S3Key": "serverless/api-rest/Stage/1621359053994-2021-05-18T17:30:53.994Z/api-rest.zip"
        },
        "Handler": "s_create.handler",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-Stage-create",
>>>>>>> develop
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
<<<<<<< HEAD
            "DYNAMODB_TABLE": "api-rest-dev"
=======
            "DYNAMODB_TABLE": "api-rest-Stage"
>>>>>>> develop
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateLogGroup"
      ]
    },
    "ListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/api-rest/dev/1621358840371-2021-05-18T17:27:20.371Z/api-rest.zip"
        },
        "Handler": "todos/list.list",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-dev-list",
=======
          "S3Key": "serverless/api-rest/Stage/1621359053994-2021-05-18T17:30:53.994Z/api-rest.zip"
        },
        "Handler": "s_list.handler",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-Stage-list",
>>>>>>> develop
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
<<<<<<< HEAD
            "DYNAMODB_TABLE": "api-rest-dev"
=======
            "DYNAMODB_TABLE": "api-rest-Stage"
>>>>>>> develop
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListLogGroup"
      ]
    },
    "GetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/api-rest/dev/1621358840371-2021-05-18T17:27:20.371Z/api-rest.zip"
        },
        "Handler": "todos/get.get",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-dev-get",
=======
          "S3Key": "serverless/api-rest/Stage/1621359053994-2021-05-18T17:30:53.994Z/api-rest.zip"
        },
        "Handler": "s_get.handler",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-Stage-get",
>>>>>>> develop
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
<<<<<<< HEAD
            "DYNAMODB_TABLE": "api-rest-dev"
=======
            "DYNAMODB_TABLE": "api-rest-Stage"
>>>>>>> develop
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetLogGroup"
      ]
    },
    "UpdateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/api-rest/dev/1621358840371-2021-05-18T17:27:20.371Z/api-rest.zip"
        },
        "Handler": "todos/update.update",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-dev-update",
=======
          "S3Key": "serverless/api-rest/Stage/1621359053994-2021-05-18T17:30:53.994Z/api-rest.zip"
        },
        "Handler": "s_update.handler",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-Stage-update",
>>>>>>> develop
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
<<<<<<< HEAD
            "DYNAMODB_TABLE": "api-rest-dev"
=======
            "DYNAMODB_TABLE": "api-rest-Stage"
>>>>>>> develop
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateLogGroup"
      ]
    },
    "DeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/api-rest/dev/1621358840371-2021-05-18T17:27:20.371Z/api-rest.zip"
        },
        "Handler": "todos/delete.delete",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-dev-delete",
=======
          "S3Key": "serverless/api-rest/Stage/1621359053994-2021-05-18T17:30:53.994Z/api-rest.zip"
        },
        "Handler": "s_delete.handler",
        "Runtime": "python3.8",
        "FunctionName": "api-rest-Stage-delete",
>>>>>>> develop
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
<<<<<<< HEAD
            "DYNAMODB_TABLE": "api-rest-dev"
=======
            "DYNAMODB_TABLE": "api-rest-Stage"
>>>>>>> develop
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteLogGroup"
      ]
    },
<<<<<<< HEAD
    "CreateLambdaVersion70PyqTpPVZSwMtsfToQknkE6DcNPpPEwP9rsygdlM": {
=======
    "ListLambdaVersionDqOQOuLif8JqONNYwh2DQGKTpQwfkWGWJ38SPZz5DwE": {
>>>>>>> develop
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
<<<<<<< HEAD
          "Ref": "CreateLambdaFunction"
        },
        "CodeSha256": "kBH4OtknyN15R5PHyO4JF9FteOfKfLy0BKBChUX1Nd8="
      }
    },
    "ListLambdaVersion1nRLdz18GrN0XHzF8MnQeiPo08r712hgC956KS4uLo": {
=======
          "Ref": "ListLambdaFunction"
        },
        "CodeSha256": "RQ6qaLofbQDeBgMEDIKFJcIMJA9UINF87mBl9lqiaT8="
      }
    },
    "GetLambdaVersionCUu48zwCAD5muuRe5DhMrNjr2ZXer5SNhYK2EIlZm8": {
>>>>>>> develop
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
<<<<<<< HEAD
          "Ref": "ListLambdaFunction"
        },
        "CodeSha256": "kBH4OtknyN15R5PHyO4JF9FteOfKfLy0BKBChUX1Nd8="
      }
    },
    "GetLambdaVersionH2nqZSznPLGH4utnQQLVEDg9UKGAXucuIcgaN8yy4": {
=======
          "Ref": "GetLambdaFunction"
        },
        "CodeSha256": "RQ6qaLofbQDeBgMEDIKFJcIMJA9UINF87mBl9lqiaT8="
      }
    },
    "UpdateLambdaVersionAiJn4HSCB18icQrUEevVfTJsIDvhh2aSAURf3dF7Y": {
>>>>>>> develop
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
<<<<<<< HEAD
          "Ref": "GetLambdaFunction"
        },
        "CodeSha256": "kBH4OtknyN15R5PHyO4JF9FteOfKfLy0BKBChUX1Nd8="
      }
    },
    "UpdateLambdaVersionIThYxWqqc1z2KPeOaN04eWafBZi5hzwkSppfkNdE0": {
=======
          "Ref": "UpdateLambdaFunction"
        },
        "CodeSha256": "RQ6qaLofbQDeBgMEDIKFJcIMJA9UINF87mBl9lqiaT8="
      }
    },
    "DeleteLambdaVersionmstpS8b0IGk4Ibuxsx1fhLlNsjPIfIk53R3ELI1Wro": {
>>>>>>> develop
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
<<<<<<< HEAD
          "Ref": "UpdateLambdaFunction"
        },
        "CodeSha256": "kBH4OtknyN15R5PHyO4JF9FteOfKfLy0BKBChUX1Nd8="
      }
    },
    "DeleteLambdaVersionVjF4D3ldSprwQxQeonalDZWKi1FHBXhBm3russjmc": {
=======
          "Ref": "DeleteLambdaFunction"
        },
        "CodeSha256": "RQ6qaLofbQDeBgMEDIKFJcIMJA9UINF87mBl9lqiaT8="
      }
    },
    "CreateLambdaVersionsbeOSO1ZHTuP86hWzLyQ3JYio0SKhBHSiBkmzeqcTQ": {
>>>>>>> develop
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
<<<<<<< HEAD
          "Ref": "DeleteLambdaFunction"
        },
        "CodeSha256": "kBH4OtknyN15R5PHyO4JF9FteOfKfLy0BKBChUX1Nd8="
=======
          "Ref": "CreateLambdaFunction"
        },
        "CodeSha256": "RQ6qaLofbQDeBgMEDIKFJcIMJA9UINF87mBl9lqiaT8="
>>>>>>> develop
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
<<<<<<< HEAD
        "Name": "dev-api-rest",
=======
        "Name": "Stage-api-rest",
>>>>>>> develop
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceTodos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "todos",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTodosIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodosOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodosIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodosIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodTodosPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTodosGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ListLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTodosIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodosIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTodosIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodosIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodTodosIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTodosIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
<<<<<<< HEAD
    "ApiGatewayDeployment1621358837408": {
=======
    "ApiGatewayDeployment1621359048160": {
>>>>>>> develop
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
<<<<<<< HEAD
        "StageName": "dev"
=======
        "StageName": "Stage"
>>>>>>> develop
      },
      "DependsOn": [
        "ApiGatewayMethodTodosOptions",
        "ApiGatewayMethodTodosIdVarOptions",
        "ApiGatewayMethodTodosPost",
        "ApiGatewayMethodTodosGet",
        "ApiGatewayMethodTodosIdVarGet",
        "ApiGatewayMethodTodosIdVarPut",
        "ApiGatewayMethodTodosIdVarDelete"
      ]
    },
    "CreateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ListLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
<<<<<<< HEAD
=======
    "ApiGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/api-gateway/api-rest-Stage"
      }
    },
    "CustomApiGatewayAccountCloudWatchRole": {
      "Type": "Custom::ApiGatewayAccountRole",
      "Version": 1,
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "Stage",
                  "api-rest",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "iam:",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "role/*"
                      ]
                    ]
                  },
                  "Action": [
                    "iam:AttachRolePolicy",
                    "iam:CreateRole",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "apigateway:*::/account"
                      ]
                    ]
                  },
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/api-rest/Stage/1621359053994-2021-05-18T17:30:53.994Z/custom-resources.zip"
        },
        "FunctionName": "api-rest-Stage-custom-resource-apigw-cw-role",
        "Handler": "apiGatewayCloudWatchRole/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
>>>>>>> develop
    "TodosDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
<<<<<<< HEAD
        "TableName": "api-rest-dev"
=======
        "TableName": "api-rest-Stage"
      }
    },
    "CloudWatchLogsSubscriptionFilterCreateLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:0efc6298-dc05-44b9-93ab-959165ee5616#xMVGDjhhbn3sCf6fPT#api-rest#Stage",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "CreateLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterListLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:0efc6298-dc05-44b9-93ab-959165ee5616#xMVGDjhhbn3sCf6fPT#api-rest#Stage",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "ListLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterGetLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:0efc6298-dc05-44b9-93ab-959165ee5616#xMVGDjhhbn3sCf6fPT#api-rest#Stage",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "GetLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterUpdateLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:0efc6298-dc05-44b9-93ab-959165ee5616#xMVGDjhhbn3sCf6fPT#api-rest#Stage",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "UpdateLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterDeleteLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:0efc6298-dc05-44b9-93ab-959165ee5616#xMVGDjhhbn3sCf6fPT#api-rest#Stage",
        "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
        "LogGroupName": {
          "Ref": "DeleteLogGroup"
        }
      }
    },
    "CloudWatchLogsSubscriptionFilterApiGatewayLogGroup": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "Properties": {
        "DestinationArn": "arn:aws:logs:us-east-1:802587217904:destination:0efc6298-dc05-44b9-93ab-959165ee5616#xMVGDjhhbn3sCf6fPT#api-rest#Stage",
        "FilterPattern": "\"SLS_ACCESS_LOG\"",
        "LogGroupName": {
          "Ref": "ApiGatewayLogGroup"
        }
>>>>>>> develop
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
<<<<<<< HEAD
        "Name": "sls-api-rest-dev-ServerlessDeploymentBucketName"
      }
    },
    "CreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateLambdaVersion70PyqTpPVZSwMtsfToQknkE6DcNPpPEwP9rsygdlM"
      },
      "Export": {
        "Name": "sls-api-rest-dev-CreateLambdaFunctionQualifiedArn"
=======
        "Name": "sls-api-rest-Stage-ServerlessDeploymentBucketName"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Value": {
        "Fn::GetAtt": [
          "EnterpriseLogAccessIamRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": "sls-api-rest-Stage-EnterpriseLogAccessIamRole"
>>>>>>> develop
      }
    },
    "ListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
<<<<<<< HEAD
        "Ref": "ListLambdaVersion1nRLdz18GrN0XHzF8MnQeiPo08r712hgC956KS4uLo"
      },
      "Export": {
        "Name": "sls-api-rest-dev-ListLambdaFunctionQualifiedArn"
=======
        "Ref": "ListLambdaVersionDqOQOuLif8JqONNYwh2DQGKTpQwfkWGWJ38SPZz5DwE"
      },
      "Export": {
        "Name": "sls-api-rest-Stage-ListLambdaFunctionQualifiedArn"
>>>>>>> develop
      }
    },
    "GetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
<<<<<<< HEAD
        "Ref": "GetLambdaVersionH2nqZSznPLGH4utnQQLVEDg9UKGAXucuIcgaN8yy4"
      },
      "Export": {
        "Name": "sls-api-rest-dev-GetLambdaFunctionQualifiedArn"
=======
        "Ref": "GetLambdaVersionCUu48zwCAD5muuRe5DhMrNjr2ZXer5SNhYK2EIlZm8"
      },
      "Export": {
        "Name": "sls-api-rest-Stage-GetLambdaFunctionQualifiedArn"
>>>>>>> develop
      }
    },
    "UpdateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
<<<<<<< HEAD
        "Ref": "UpdateLambdaVersionIThYxWqqc1z2KPeOaN04eWafBZi5hzwkSppfkNdE0"
      },
      "Export": {
        "Name": "sls-api-rest-dev-UpdateLambdaFunctionQualifiedArn"
=======
        "Ref": "UpdateLambdaVersionAiJn4HSCB18icQrUEevVfTJsIDvhh2aSAURf3dF7Y"
      },
      "Export": {
        "Name": "sls-api-rest-Stage-UpdateLambdaFunctionQualifiedArn"
>>>>>>> develop
      }
    },
    "DeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
<<<<<<< HEAD
        "Ref": "DeleteLambdaVersionVjF4D3ldSprwQxQeonalDZWKi1FHBXhBm3russjmc"
      },
      "Export": {
        "Name": "sls-api-rest-dev-DeleteLambdaFunctionQualifiedArn"
=======
        "Ref": "DeleteLambdaVersionmstpS8b0IGk4Ibuxsx1fhLlNsjPIfIk53R3ELI1Wro"
      },
      "Export": {
        "Name": "sls-api-rest-Stage-DeleteLambdaFunctionQualifiedArn"
      }
    },
    "CreateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateLambdaVersionsbeOSO1ZHTuP86hWzLyQ3JYio0SKhBHSiBkmzeqcTQ"
      },
      "Export": {
        "Name": "sls-api-rest-Stage-CreateLambdaFunctionQualifiedArn"
>>>>>>> develop
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
<<<<<<< HEAD
            "/dev"
=======
            "/Stage"
>>>>>>> develop
          ]
        ]
      },
      "Export": {
<<<<<<< HEAD
        "Name": "sls-api-rest-dev-ServiceEndpoint"
=======
        "Name": "sls-api-rest-Stage-ServiceEndpoint"
>>>>>>> develop
      }
    }
  }
}